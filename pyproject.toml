[project]
authors = [{name = "Thomas A Caswell", email = "tcaswell@gmail.com"}]
description = "Helpers to draw Celtic-stlye knots."
name = "knots"
requires-python = ">= 3.12"
version = "0.1.0"
dependencies = ["mpl-gui @ git+https://github.com/matplotlib/mpl-gui"]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
knots = { path = ".", editable = true }

[tool.pixi.tasks]
gen_readme_images = "python scripts/readme_images.py"

[tool.pixi.dependencies]
matplotlib = ">=3.10.0,<4"
contourpy = ">=1.3.1,<2"

[tool.pixi.feature.doc.dependencies]
sphinx = "*"
numpydoc = ">=1.8.0,<2"
pydata-sphinx-theme = ">=0.16.1,<0.17"

[tool.pixi.feature.doc.tasks]
build_docs = { cmd = "make html", cwd = "doc" }

[tool.pixi.environments]
doc = ["doc"]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.12"
warn_unused_configs = true
strict = false
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[tool.ruff]
lint.select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
lint.extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long, trust the formatter to get it right
  "ISC001", # implicit concat, can be handy
  # QA for wrong opinions
  "RET505", # return in else (clearer with the `else`)
  "RET504", # do not complain about extra locals
  "SIM105", # contextlib.suppress rather than try...except (just use language)
  "SIM108", # ternaries are not actually clearer (just fewer lines)
  "PTH123", # Path.open vs open (using the builtin is fine)
  "PIE804", # creating dict to ** it is fine
  "C408",   # using dict() is fine
  "NPY002", # allow the old numpy random generator
  "EM101",  # string literals in error messages are fine, stop power tripping
]
lint.unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
#   "F401", # Do not auto-remove unused imports (annoying to work with)
]
lint.flake8-unused-arguments.ignore-variadic-names = true

src = ["src"]
exclude = []
# Uncomment if using a _compat.typing backport
# typing-modules = ["bad_tools._compat.typing"]

[lint.isort]
required-imports = []

[tool.ruff.lint.isort.sections]
# Group all Django imports into a separate section.
"scipy" = ["matplotlib", "numpy", "scipy"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "scipy", "first-party", "local-folder", "third-party"]
